
/*
========================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
========================================================================
Script Purpose:
      This stored procedure performs the ETL (Extract, Transform, Load) process to
      populate the 'silver' schema tables from the 'bronze' schema.
Actions Performed:
- Truncates Silver tables.
- Inserts transformed and cleansed data from Bronze into Silver tables.


Parameters:
None.
            This stored procedure does not accept any parameters or return any values.

Usage Example:
EXEC Silver.load_silver;
=========================================================================
*/

CREATE OR ALTER PROCEDURE SILVER.load_silver AS
BEGIN
      DECLARE @START_TIME DATETIME,@END_TIME DATETIME,@batch_start_time DATETIME ,@batch_end_time DATETIME;
   BEGIN TRY
       SET @batch_start_time = GETDATE();

PRINT '=============================================';
PRINT'LOADING SILVER LAYER';
PRINT '=============================================';

PRINT'-----------------------------------------------';
PRINT'CRM LOADING';
PRINT'-----------------------------------------------';

SET @START_TIME =GETDATE();

PRINT '>>TRUNCATING TABLE: SILVER.crm_cust_info';
TRUNCATE TABLE SILVER.crm_cust_info;
PRINT ' INSERTING DATA INTO: SILVER.crm_cust_info'; 
INSERT INTO SILVER.crm_cust_info (
cst_id,
cst_key,
cst_firstname,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date
)
SELECT
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM (cst_lastname) AS cst_lastname,
CASE 
WHEN UPPER (TRIM(cst_material_status))='s' THEN 'Single'
 WHEN  UPPER (TRIM(cst_material_status))='M' THEN 'Married'
   ELSE 'N\A'
   END cst_material_status,
CASE 
WHEN UPPER (TRIM(cst_gndr))='F' THEN 'Female'
 WHEN  UPPER (TRIM(cst_gndr))='M' THEN 'Male'
   ELSE 'N\A'
   END cst_gndr,
cst_create_date
FROM(
SELECT *,

ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM

bronze.crm_cust_info
)t WHERE flag_last = 1;
 SET @END_TIME =GETDATE();
    PRINT '>> LOAD DURATION:'+CAST(DATEDIFF(SECOND,@START_TIME,@END_TIME)AS NVARCHAR)+'SECONDS';
    PRINT '--------------------------------------------';

-- Loading silver.crm_pra_info

SET @START_TIME = GETDATE();
PRINT '>>TRUNCATING TABLE: SILVER.crm_pra_info';
TRUNCATE TABLE SILVER.crm_pra_info;
PRINT ' INSERTING DATA INTO: SILVER.crm_pra_info'; 
INSERT INTO SILVER.crm_pra_info(
prd_id,
cat_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt
)
SELECT 
prd_id,
prd_key,
REPLACE (SUBSTRING (prd_key,1,5), '-','_' )AS cat_id,
SUBSTRING (prd_key,7 ,LEN(prd_key)) AS prd_key,
isnull (prd_cost,0) AS prd_cost,
CASE UPPER(TRIM(prd_line))
     WHEN 'M' THEN 'MOUNTAIN'
     WHEN 'R' THEN 'ROAD'
     WHEN 'S' THEN 'OTER SALES'
     WHEN 'T' THEN 'TOURING'
     else 'n/a'
END AS prd_line,
CAST (prd_start_dt AS DATE ) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE ) AS prd_end_dt
FROM   BRONZE.crm_pra_info
SET @END_TIME = GETDATE();
    PRINT '>> LOAD DURATION:'+CAST(DATEDIFF(SECOND,@START_TIME,@END_TIME)AS NVARCHAR)+'SECONDS';
    PRINT '--------------------------------------------';

-- Loading SILVER.crm_sales_details

SET @START_TIME =GETDATE();
PRINT '>>TRUNCATING TABLE: SILVER.crm_sales_details';
TRUNCATE TABLE SILVER.crm_sales_details;
PRINT ' INSERTING DATA INTO: SILVER.crm_sales_details'; 

INSERT INTO SILVER.crm_sales_details(
sls_ord_num,
sls_prd_key ,
sls_cust_id ,
sis_order_dt ,
sls_ship_dt ,
sls_due_dt ,
sis_sales ,
sls_quantity,
sls_price
)
SELECT 
sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sis_order_dt = 0 OR LEN (sis_order_dt) !=8 THEN NULL
ELSE CAST(CAST(sis_order_dt AS VARCHAR ) AS DATE)
END AS sis_order_dt,
CASE WHEN sls_ship_dt = 0 or len (sls_ship_dt) !=8 THEN NULL
ELSE CAST(CAST(sls_ship_dt as varchar ) AS DATE)
END AS sls_ship_dt,
CASE WHEN sls_due_dt = 0 or len (sls_due_dt) !=8 THEN NULL
ELSE CAST(CAST(sls_due_dt AS VARCHAR ) AS DATE)
END AS sls_due_dt,
 CASE WHEN sis_sales IS NULL OR sis_sales <=0  OR sis_sales !=sls_quantity * ABS(sls_price)
          THEN sls_quantity *ABS(sls_price)
          ELSE sis_sales
END AS sis_sales ,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <=0
          THEN sis_sales / NULLIF(sls_quantity,0)
          ELSE sls_price
END AS sls_price
FROM BRONZE.crm_sales_details
WHERE sls_prd_key NOT IN (SELECT prd_key FROM silver.crm_pra_info)
SET @END_TIME = GETDATE();
    PRINT '>> LOAD DURATION:'+CAST(DATEDIFF(SECOND,@START_TIME,@END_TIME)AS NVARCHAR)+'SECONDS';
    PRINT '--------------------------------------------';

-- Loading SILVER.erp_cust_az12

SET @START_TIME =GETDATE();

PRINT '>>TRUNCATING TABLE: SILVER.erp_cust_az12';
TRUNCATE TABLE SILVER.erp_cust_az12;
PRINT ' INSERTING DATA INTO: SILVER.erp_cust_az12';

INSERT INTO SILVER.erp_cust_az12 (cid,bdate,gen)

SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid,
      CASE WHEN bdate > GETDATE() THEN NULL
      ELSE bdate
      END AS bdate,
    CASE WHEN UPPER(TRIM(gen)) IN ('F','FEMALE') THEN 'FEMALE'
         WHEN UPPER(TRIM(gen)) IN ('M','MALE') THEN 'MALE'
         ELSE 'N/A'
         END AS gen
FROM BRONZE.erp_cust_az12
SET @END_TIME = GETDATE();
    PRINT '>> LOAD DURATION:'+CAST(DATEDIFF(SECOND,@START_TIME,@END_TIME)AS NVARCHAR)+'SECONDS';
    PRINT '--------------------------------------------';

-- Loading SILVER.erp_loc_a101

SET @START_TIME =GETDATE();
PRINT '>>TRUNCATING TABLE: SILVER.erp_loc_a101';
TRUNCATE TABLE SILVER.erp_loc_a101;
PRINT ' INSERTING DATA INTO: SILVER.erp_loc_a101';

INSERT INTO SILVER.erp_loc_a101
 (CID,
 cntry)
 SELECT 
 REPLACE (cid,'-','')CID,
         CASE WHEN TRIM(cntry) ='DE' THEN 'GERMANY'
              WHEN TRIM(cntry) IN ('US' ,'USA') THEN 'UNITED STATES'
              WHEN TRIM(cntry) = ''OR cntry IS NULL THEN 'N/A'
              ELSE TRIM(cntry)
 END AS cntry
 FROM BRONZE.erp_loc_a101
 
SET @END_TIME = GETDATE();
    PRINT '>> LOAD DURATION:'+CAST(DATEDIFF(SECOND,@START_TIME,@END_TIME)AS NVARCHAR)+'SECONDS';
    PRINT '--------------------------------------------';

-- Loading SILVER.erp_px_cat_g1v2

SET @START_TIME =GETDATE();

 PRINT '>>TRUNCATING TABLE: SILVER.erp_px_cat_g1v2';
TRUNCATE TABLE SILVER.erp_px_cat_g1v2;
PRINT ' INSERTING DATA INTO: SILVER.erp_px_cat_g1v2';

INSERT INTO SILVER.erp_px_cat_g1v2(
id,
cat,
subcat,
maintance)
SELECT 
id,
cat,
subcat,
maintance
FROM BRONZE.erp_px_cat_g1v2

SET @END_TIME = GETDATE();
    PRINT '>> LOAD DURATION:'+CAST(DATEDIFF(SECOND,@START_TIME,@END_TIME)AS NVARCHAR)+'SECONDS';
    PRINT '--------------------------------------------';

    set @batch_END_time = GETDATE();
    PRINT'---------------------------------------------------'
    PRINT 'LOADING SILVER LAYER IS COMPLETED';
    PRINT '- TOTAL LOAD DURATION: ' +  CAST (DATEDIFF ( SECOND , @batch_start_time, @batch_end_time)
    as nvarchar) +'seconds';
    print '--------------------------------------------------'

  END TRY
     BEGIN CATCH 
     PRINT '----------------------------------------------------------'
     PRINT 'ERROR OCCURED'
     PRINT 'ERROR MESSAGE'+ERROR_MESSAGE();
     PRINT 'ERROR MESSAGE'+CAST(ERROR_NUMBER() AS NVARCHAR);
     PRINT 'ERROR MESSAGE'+CAST(ERROR_STATE() AS NVARCHAR);
     PRINT '----------------------------------------------------------'
     END CATCH

END
